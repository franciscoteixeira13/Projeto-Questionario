{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fteixeira\\\\Documents\\\\Projeto-Questionario\\\\my-app\\\\src\\\\SelectQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './SelectQuestions.css';\nimport * as XLSX from 'xlsx';\nimport { useNavigate } from 'react-router-dom';\nimport UserInfo from './UserInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectQuestions = () => {\n  _s();\n  const [questionsData, setQuestionsData] = useState([]);\n  const [selectedQuestions, setSelectedQuestions] = useState({});\n  const [expandedScopes, setExpandedScopes] = useState({});\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Carrega as perguntas do arquivo Excel\n    fetch('/respostas_questionarios.xlsx').then(response => response.arrayBuffer()).then(data => {\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const firstSheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[firstSheetName];\n      const json = XLSX.utils.sheet_to_json(worksheet, {\n        header: 1\n      });\n      const header = json[0]; // Primeiro elemento como cabeçalho\n      const perguntas = json.slice(1).map(row => ({\n        pergunta: row[header.indexOf('Pergunta')],\n        âmbito: row[header.indexOf('âmbito')],\n        id: row[header.indexOf('Indice Pergunta')],\n        normasAplicaveis: row[header.indexOf('Normas aplicaveis')]\n      }));\n      setQuestionsData(perguntas);\n\n      // Inicializa todas as perguntas como selecionadas\n      const initialSelected = perguntas.reduce((acc, question) => {\n        acc[question.id] = false; // Marca a pergunta como selecionada\n        return acc;\n      }, {});\n      setSelectedQuestions(initialSelected);\n    }).catch(error => console.error('Erro ao ler o arquivo Excel:', error));\n  }, []);\n  const handleCheckboxChange = id => {\n    setSelectedQuestions(prev => ({\n      ...prev,\n      [id]: !prev[id] // Inverte o estado da checkbox\n    }));\n  };\n  const toggleScope = scope => {\n    setExpandedScopes(prev => ({\n      ...prev,\n      [scope]: !prev[scope]\n    }));\n  };\n  const startSurvey = () => {\n    // Filtra apenas as perguntas selecionadas\n    const selectedQuestionsList = questionsData.filter(q => selectedQuestions[q.id]);\n    navigate('/survey', {\n      state: {\n        selectedQuestions: selectedQuestionsList,\n        userInfo\n      }\n    });\n  };\n\n  // Agrupa as perguntas por âmbito\n  const groupedQuestions = questionsData.reduce((groups, question) => {\n    if (!question.âmbito) return groups; // Ignora perguntas sem âmbito\n    if (!groups[question.âmbito]) {\n      groups[question.âmbito] = [];\n    }\n    groups[question.âmbito].push(question);\n    return groups;\n  }, {});\n\n  // Filtra grupos para remover âmbitos sem perguntas\n  const filteredGroupedQuestions = Object.entries(groupedQuestions).filter(([scope, questions]) => questions.length > 1) // Remove âmbitos sem perguntas\n  .reduce((acc, [scope, questions]) => {\n    acc[scope] = questions;\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"select-questions-container\",\n      children: \"Selecione as Perguntas para Responder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), Object.keys(filteredGroupedQuestions).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"N\\xE3o h\\xE1 perguntas dispon\\xEDveis.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this) : Object.keys(filteredGroupedQuestions).map(scope => {\n      const questionsInScope = filteredGroupedQuestions[scope];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scope-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"scope-title\",\n          onClick: () => toggleScope(scope),\n          style: {\n            cursor: 'pointer'\n          },\n          children: [scope, \" \", expandedScopes[scope] ? '▲' : '▼']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }, this), expandedScopes[scope] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questions-list\",\n          children: questionsInScope.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"question-checkbox\",\n              checked: !!selectedQuestions[question.id] // Verifica se a pergunta está selecionada\n              ,\n              onChange: () => handleCheckboxChange(question.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"question label\",\n              children: question.pergunta\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 45\n            }, this)]\n          }, question.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 33\n        }, this)]\n      }, scope, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-survey-button\",\n      onClick: startSurvey,\n      children: \"Iniciar Question\\xE1rio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectQuestions, \"85D6hiYPA0kD13CdlxvQtJBnHT8=\", false, function () {\n  return [useNavigate];\n});\n_c = SelectQuestions;\nexport default SelectQuestions;\nvar _c;\n$RefreshReg$(_c, \"SelectQuestions\");","map":{"version":3,"names":["React","useEffect","useState","XLSX","useNavigate","UserInfo","jsxDEV","_jsxDEV","SelectQuestions","_s","questionsData","setQuestionsData","selectedQuestions","setSelectedQuestions","expandedScopes","setExpandedScopes","navigate","fetch","then","response","arrayBuffer","data","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","json","utils","sheet_to_json","header","perguntas","slice","map","row","pergunta","indexOf","âmbito","id","normasAplicaveis","initialSelected","reduce","acc","question","catch","error","console","handleCheckboxChange","prev","toggleScope","scope","startSurvey","selectedQuestionsList","filter","q","state","userInfo","groupedQuestions","groups","push","filteredGroupedQuestions","Object","entries","questions","length","children","className","fileName","_jsxFileName","lineNumber","columnNumber","keys","questionsInScope","onClick","style","cursor","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/fteixeira/Documents/Projeto-Questionario/my-app/src/SelectQuestions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './SelectQuestions.css'\r\nimport * as XLSX from 'xlsx';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UserInfo from './UserInfo';\r\n\r\nconst SelectQuestions = () => {\r\n    const [questionsData, setQuestionsData] = useState([]);\r\n    const [selectedQuestions, setSelectedQuestions] = useState({});\r\n    const [expandedScopes, setExpandedScopes] = useState({});\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Carrega as perguntas do arquivo Excel\r\n        fetch('/respostas_questionarios.xlsx')\r\n            .then(response => response.arrayBuffer())\r\n            .then(data => {\r\n                const workbook = XLSX.read(data, { type: 'array' });\r\n                const firstSheetName = workbook.SheetNames[0];\r\n                const worksheet = workbook.Sheets[firstSheetName];\r\n                const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n\r\n                const header = json[0]; // Primeiro elemento como cabeçalho\r\n                const perguntas = json.slice(1).map(row => ({\r\n                    pergunta: row[header.indexOf('Pergunta')],\r\n                    âmbito: row[header.indexOf('âmbito')],\r\n                    id: row[header.indexOf('Indice Pergunta')],\r\n                    normasAplicaveis: row[header.indexOf('Normas aplicaveis')]\r\n                }));\r\n\r\n                setQuestionsData(perguntas);\r\n\r\n                // Inicializa todas as perguntas como selecionadas\r\n                const initialSelected = perguntas.reduce((acc, question) => {\r\n                    acc[question.id] = false; // Marca a pergunta como selecionada\r\n                    return acc;\r\n                }, {});\r\n                setSelectedQuestions(initialSelected);\r\n            })\r\n            .catch(error => console.error('Erro ao ler o arquivo Excel:', error));\r\n    }, []);\r\n\r\n    const handleCheckboxChange = (id) => {\r\n        setSelectedQuestions(prev => ({\r\n            ...prev,\r\n            [id]: !prev[id] // Inverte o estado da checkbox\r\n        }));\r\n    };\r\n\r\n    const toggleScope = (scope) => {\r\n        setExpandedScopes(prev => ({\r\n            ...prev,\r\n            [scope]: !prev[scope]\r\n        }));\r\n    };\r\n\r\n    const startSurvey = () => {\r\n        // Filtra apenas as perguntas selecionadas\r\n        const selectedQuestionsList = questionsData.filter(q => selectedQuestions[q.id]);\r\n        navigate('/survey', { state: { selectedQuestions: selectedQuestionsList, userInfo } });\r\n    };\r\n\r\n    // Agrupa as perguntas por âmbito\r\n    const groupedQuestions = questionsData.reduce((groups, question) => {\r\n        if (!question.âmbito) return groups; // Ignora perguntas sem âmbito\r\n        if (!groups[question.âmbito]) {\r\n            groups[question.âmbito] = [];\r\n        }\r\n        groups[question.âmbito].push(question);\r\n        return groups;\r\n    }, {});\r\n\r\n    // Filtra grupos para remover âmbitos sem perguntas\r\n    const filteredGroupedQuestions = Object.entries(groupedQuestions)\r\n        .filter(([scope, questions]) => questions.length > 1) // Remove âmbitos sem perguntas\r\n        .reduce((acc, [scope, questions]) => {\r\n            acc[scope] = questions;\r\n            return acc;\r\n        }, {});\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"select-questions-container\">Selecione as Perguntas para Responder</h1>\r\n            {Object.keys(filteredGroupedQuestions).length === 0 ? (\r\n                <p>Não há perguntas disponíveis.</p>\r\n            ) : (\r\n                Object.keys(filteredGroupedQuestions).map(scope => {\r\n                    const questionsInScope = filteredGroupedQuestions[scope];\r\n\r\n                    return (\r\n                        <div className=\"scope-container\" key={scope}>\r\n                            <h2 className=\"scope-title\" onClick={() => toggleScope(scope)} style={{ cursor: 'pointer' }}>\r\n                                {scope} {expandedScopes[scope] ? '▲' : '▼'}\r\n                            </h2>\r\n                            {expandedScopes[scope] && (\r\n                                <div className='questions-list'>\r\n                                    {questionsInScope.map((question) => (\r\n                                        <div className='question-item' key={question.id}>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                className='question-checkbox'\r\n                                                checked={!!selectedQuestions[question.id]} // Verifica se a pergunta está selecionada\r\n                                                onChange={() => handleCheckboxChange(question.id)}\r\n                                            />\r\n                                            <label className='question label'>{question.pergunta}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                })\r\n            )}\r\n            <button className=\"start-survey-button\"  onClick={startSurvey}>Iniciar Questionário</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}