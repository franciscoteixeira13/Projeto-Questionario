{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fteixeira\\\\Documents\\\\Projeto-Questionario\\\\my-app\\\\src\\\\SelectQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './SelectQuestions.css';\nimport * as XLSX from 'xlsx';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectQuestions = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    InfoEntrevistado,\n    InfoEntrevistadoe\n  } = location.state || {}; // Recebe userInfo e interviewerInfo do estado\n\n  const [questionsData, setQuestionsData] = useState([]);\n  const [selectedQuestions, setSelectedQuestions] = useState({});\n  const [expandedScopes, setExpandedScopes] = useState({});\n  useEffect(() => {\n    fetch('/respostas_questionarios.xlsx').then(response => response.arrayBuffer()).then(data => {\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const firstSheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[firstSheetName];\n      const json = XLSX.utils.sheet_to_json(worksheet, {\n        header: 1\n      });\n      const header = json[0];\n      const perguntas = json.slice(1).map(row => ({\n        pergunta: row[header.indexOf('Pergunta')],\n        âmbito: row[header.indexOf('âmbito')],\n        id: row[header.indexOf('Indice Pergunta')],\n        normasAplicaveis: row[header.indexOf('Normas_aplicavel')]\n      }));\n      const initialSelected = perguntas.reduce((acc, question) => {\n        if (question.pergunta && question.pergunta.trim() !== '') {\n          acc[question.id] = false;\n        }\n        return acc;\n      }, {});\n      const filteredQuestions = perguntas.filter(q => q.pergunta && q.pergunta.trim() !== '');\n      setQuestionsData(filteredQuestions);\n      setSelectedQuestions(initialSelected);\n    }).catch(error => console.error('Erro ao ler o arquivo Excel:', error));\n  }, []);\n  const handleCheckboxChange = id => {\n    setSelectedQuestions(prev => ({\n      ...prev,\n      [id]: !prev[id]\n    }));\n  };\n  const toggleScope = scope => {\n    setExpandedScopes(prev => ({\n      ...prev,\n      [scope]: !prev[scope]\n    }));\n  };\n  const handleScopeCheckboxChange = scope => {\n    const questionsInScope = questionsData.filter(q => q.âmbito === scope);\n    const areAllSelected = questionsInScope.every(q => selectedQuestions[q.id]);\n    const newSelectedQuestions = {\n      ...selectedQuestions\n    };\n    questionsInScope.forEach(q => {\n      newSelectedQuestions[q.id] = !areAllSelected;\n    });\n    setSelectedQuestions(newSelectedQuestions);\n  };\n  const startSurvey = () => {\n    const selectedQuestionsList = questionsData.filter(q => selectedQuestions[q.id]);\n    navigate('/survey', {\n      state: {\n        selectedQuestions: selectedQuestionsList,\n        userInfo,\n        interviewerInfo\n      }\n    });\n  };\n  const groupedQuestions = questionsData.reduce((groups, question) => {\n    if (!question.âmbito) return groups;\n    if (!groups[question.âmbito]) {\n      groups[question.âmbito] = [];\n    }\n    groups[question.âmbito].push(question);\n    return groups;\n  }, {});\n  const filteredGroupedQuestions = Object.entries(groupedQuestions).filter(([scope, questions]) => questions.length > 1).reduce((acc, [scope, questions]) => {\n    acc[scope] = questions;\n    return acc;\n  }, {});\n  const selectedCountByScope = Object.keys(filteredGroupedQuestions).reduce((acc, scope) => {\n    acc[scope] = filteredGroupedQuestions[scope].filter(q => selectedQuestions[q.id]).length;\n    return acc;\n  }, {});\n  const isAnyQuestionSelected = Object.values(selectedQuestions).some(isSelected => isSelected);\n\n  // Contagem geral: selecionadas / total\n  const totalQuestions = questionsData.length;\n  const totalSelected = Object.values(selectedQuestions).filter(isSelected => isSelected).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"select-questions-container\",\n      children: \"Selecione as Perguntas a que vai Responder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"selected-count\",\n      children: [\"Quest\\xF5es Selecionadas: \", totalSelected, \"/\", totalQuestions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), \" \", Object.keys(filteredGroupedQuestions).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"N\\xE3o h\\xE1 perguntas dispon\\xEDveis.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this) : Object.keys(filteredGroupedQuestions).map(scope => {\n      const questionsInScope = filteredGroupedQuestions[scope];\n      const totalQuestionsInScope = questionsInScope.length;\n      const selectedQuestionsInScope = selectedCountByScope[scope];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scope-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"scope-title\",\n          onClick: () => toggleScope(scope),\n          style: {\n            cursor: 'pointer'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"scope-checkbox\",\n            checked: questionsInScope.every(q => selectedQuestions[q.id]),\n            onChange: () => handleScopeCheckboxChange(scope)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 33\n          }, this), scope, \" (\", selectedQuestionsInScope, \"/\", totalQuestionsInScope, \") \", expandedScopes[scope] ? ' ▲' : ' ▼']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }, this), expandedScopes[scope] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questions-list\",\n          children: questionsInScope.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"custom-checkbox\",\n              checked: !!selectedQuestions[question.id],\n              onChange: () => handleCheckboxChange(question.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"question-label\",\n              children: question.pergunta\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 45\n            }, this)]\n          }, question.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 33\n        }, this)]\n      }, scope, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-survey-button\",\n      onClick: startSurvey,\n      disabled: !isAnyQuestionSelected,\n      children: \"Iniciar Question\\xE1rio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectQuestions, \"LIJGna8kdY1FtkwDMfrCyAy93MY=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = SelectQuestions;\nexport default SelectQuestions;\nvar _c;\n$RefreshReg$(_c, \"SelectQuestions\");","map":{"version":3,"names":["React","useEffect","useState","XLSX","useNavigate","useLocation","jsxDEV","_jsxDEV","SelectQuestions","_s","location","navigate","InfoEntrevistado","InfoEntrevistadoe","state","questionsData","setQuestionsData","selectedQuestions","setSelectedQuestions","expandedScopes","setExpandedScopes","fetch","then","response","arrayBuffer","data","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","json","utils","sheet_to_json","header","perguntas","slice","map","row","pergunta","indexOf","âmbito","id","normasAplicaveis","initialSelected","reduce","acc","question","trim","filteredQuestions","filter","q","catch","error","console","handleCheckboxChange","prev","toggleScope","scope","handleScopeCheckboxChange","questionsInScope","areAllSelected","every","newSelectedQuestions","forEach","startSurvey","selectedQuestionsList","userInfo","interviewerInfo","groupedQuestions","groups","push","filteredGroupedQuestions","Object","entries","questions","length","selectedCountByScope","keys","isAnyQuestionSelected","values","some","isSelected","totalQuestions","totalSelected","children","className","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestionsInScope","selectedQuestionsInScope","onClick","style","cursor","checked","onChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/fteixeira/Documents/Projeto-Questionario/my-app/src/SelectQuestions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './SelectQuestions.css';\r\nimport * as XLSX from 'xlsx';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst SelectQuestions = () => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const { InfoEntrevistado, InfoEntrevistadoe } = location.state || {}; // Recebe userInfo e interviewerInfo do estado\r\n\r\n    const [questionsData, setQuestionsData] = useState([]);\r\n    const [selectedQuestions, setSelectedQuestions] = useState({});\r\n    const [expandedScopes, setExpandedScopes] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetch('/respostas_questionarios.xlsx')\r\n            .then(response => response.arrayBuffer())\r\n            .then(data => {\r\n                const workbook = XLSX.read(data, { type: 'array' });\r\n                const firstSheetName = workbook.SheetNames[0];\r\n                const worksheet = workbook.Sheets[firstSheetName];\r\n                const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n                const header = json[0];\r\n                const perguntas = json.slice(1).map(row => ({\r\n                    pergunta: row[header.indexOf('Pergunta')],\r\n                    âmbito: row[header.indexOf('âmbito')],\r\n                    id: row[header.indexOf('Indice Pergunta')],\r\n                    normasAplicaveis: row[header.indexOf('Normas_aplicavel')],\r\n                }));\r\n\r\n                const initialSelected = perguntas.reduce((acc, question) => {\r\n                    if (question.pergunta && question.pergunta.trim() !== '') {\r\n                        acc[question.id] = false;\r\n                    }\r\n                    return acc;\r\n                }, {});\r\n\r\n                const filteredQuestions = perguntas.filter(q => q.pergunta && q.pergunta.trim() !== '');\r\n\r\n                setQuestionsData(filteredQuestions);\r\n                setSelectedQuestions(initialSelected);\r\n            })\r\n            .catch(error => console.error('Erro ao ler o arquivo Excel:', error));\r\n    }, []);\r\n\r\n    const handleCheckboxChange = (id) => {\r\n        setSelectedQuestions(prev => ({\r\n            ...prev,\r\n            [id]: !prev[id],\r\n        }));\r\n    };\r\n\r\n    const toggleScope = (scope) => {\r\n        setExpandedScopes(prev => ({\r\n            ...prev,\r\n            [scope]: !prev[scope],\r\n        }));\r\n    };\r\n\r\n    const handleScopeCheckboxChange = (scope) => {\r\n        const questionsInScope = questionsData.filter(q => q.âmbito === scope);\r\n        const areAllSelected = questionsInScope.every(q => selectedQuestions[q.id]);\r\n\r\n        const newSelectedQuestions = { ...selectedQuestions };\r\n        questionsInScope.forEach(q => {\r\n            newSelectedQuestions[q.id] = !areAllSelected;\r\n        });\r\n\r\n        setSelectedQuestions(newSelectedQuestions);\r\n    };\r\n\r\n    const startSurvey = () => {\r\n        const selectedQuestionsList = questionsData.filter(q => selectedQuestions[q.id]);\r\n        navigate('/survey', { state: { selectedQuestions: selectedQuestionsList, userInfo, interviewerInfo } });\r\n    };\r\n\r\n    const groupedQuestions = questionsData.reduce((groups, question) => {\r\n        if (!question.âmbito) return groups;\r\n        if (!groups[question.âmbito]) {\r\n            groups[question.âmbito] = [];\r\n        }\r\n        groups[question.âmbito].push(question);\r\n        return groups;\r\n    }, {});\r\n\r\n    const filteredGroupedQuestions = Object.entries(groupedQuestions)\r\n        .filter(([scope, questions]) => questions.length > 1)\r\n        .reduce((acc, [scope, questions]) => {\r\n            acc[scope] = questions;\r\n            return acc;\r\n        }, {});\r\n\r\n    const selectedCountByScope = Object.keys(filteredGroupedQuestions).reduce((acc, scope) => {\r\n        acc[scope] = filteredGroupedQuestions[scope].filter(q => selectedQuestions[q.id]).length;\r\n        return acc;\r\n    }, {});\r\n\r\n    const isAnyQuestionSelected = Object.values(selectedQuestions).some(isSelected => isSelected);\r\n\r\n    // Contagem geral: selecionadas / total\r\n    const totalQuestions = questionsData.length;\r\n    const totalSelected = Object.values(selectedQuestions).filter(isSelected => isSelected).length;\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"select-questions-container\">Selecione as Perguntas a que vai Responder</h1>\r\n            <p className='selected-count'>Questões Selecionadas: {totalSelected}/{totalQuestions}</p> {/* Exibição dinâmica no formato 15/30 */}\r\n            {Object.keys(filteredGroupedQuestions).length === 0 ? (\r\n                <p>Não há perguntas disponíveis.</p>\r\n            ) : (\r\n                Object.keys(filteredGroupedQuestions).map(scope => {\r\n                    const questionsInScope = filteredGroupedQuestions[scope];\r\n                    const totalQuestionsInScope = questionsInScope.length;\r\n                    const selectedQuestionsInScope = selectedCountByScope[scope];\r\n\r\n                    return (\r\n                        <div className=\"scope-container\" key={scope}>\r\n                            <h2 className=\"scope-title\" onClick={() => toggleScope(scope)} style={{ cursor: 'pointer' }}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"scope-checkbox\"\r\n                                    checked={questionsInScope.every(q => selectedQuestions[q.id])}\r\n                                    onChange={() => handleScopeCheckboxChange(scope)}\r\n                                />\r\n                                {scope} ({selectedQuestionsInScope}/{totalQuestionsInScope}) {/* Exibição no formato selecionadas/total */}\r\n                                {expandedScopes[scope] ? ' ▲' : ' ▼'}\r\n                            </h2>\r\n                            {expandedScopes[scope] && (\r\n                                <div className=\"questions-list\">\r\n                                    {questionsInScope.map((question) => (\r\n                                        <div className=\"question-item\" key={question.id}>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                className=\"custom-checkbox\"\r\n                                                checked={!!selectedQuestions[question.id]}\r\n                                                onChange={() => handleCheckboxChange(question.id)}\r\n                                            />\r\n                                            <label className=\"question-label\">{question.pergunta}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                })\r\n            )}\r\n            <button\r\n                className=\"start-survey-button\"\r\n                onClick={startSurvey}\r\n                disabled={!isAnyQuestionSelected}\r\n            >\r\n                Iniciar Questionário\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectQuestions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}