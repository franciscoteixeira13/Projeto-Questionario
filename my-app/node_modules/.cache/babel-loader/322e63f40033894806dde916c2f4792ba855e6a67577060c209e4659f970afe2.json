{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fteixeira\\\\Documents\\\\Projeto-Questionario\\\\my-app\\\\src\\\\SelectQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './SelectQuestions.css';\nimport * as XLSX from 'xlsx';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectQuestions = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    InfoEntrevistador,\n    InfoEntrevistado\n  } = location.state || {};\n  const [questionsData, setQuestionsData] = useState([]);\n  const [selectedQuestions, setSelectedQuestions] = useState({});\n  const [expandedScopes, setExpandedScopes] = useState({});\n  const [selectAll, setSelectAll] = useState(false); // Estado para selecionar/deselecionar todas as perguntas\n\n  useEffect(() => {\n    if (!InfoEntrevistador || !InfoEntrevistado || Object.values(InfoEntrevistador).some(value => !value || value.trim() === '') || Object.values(InfoEntrevistado).some(value => !value || value.trim() === '')) {\n      alert(\"Por favor, preencha todas as informações antes de prosseguir.\");\n      navigate('/');\n    }\n  }, [InfoEntrevistador, InfoEntrevistado, navigate]);\n  useEffect(() => {\n    const loadExcelFile = async () => {\n      try {\n        // Primeiro fetch: Obter o nome do arquivo\n        const fileNameResponse = await fetch('/api/first-excel-file');\n        if (!fileNameResponse.ok) {\n          throw new Error('Erro ao buscar o nome do arquivo.');\n        }\n        const {\n          fileName\n        } = await fileNameResponse.json();\n\n        // Segundo fetch: Carregar o arquivo Excel\n        const fileResponse = await fetch(`/ficheiro-excel/${fileName}`);\n        if (!fileResponse.ok) {\n          throw new Error('Erro ao carregar o arquivo Excel.');\n        }\n        const data = await fileResponse.arrayBuffer();\n\n        // Processar o arquivo Excel\n        const workbook = XLSX.read(data, {\n          type: 'array'\n        });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        const json = XLSX.utils.sheet_to_json(worksheet, {\n          header: 1\n        });\n        const header = json[0];\n        const perguntas = json.slice(1).map(row => ({\n          pergunta: row[header.indexOf('Pergunta')],\n          âmbito: row[header.indexOf('âmbito')],\n          id: row[header.indexOf('Indice Pergunta')],\n          normasAplicaveis: row[header.indexOf('Normas_aplicavel')]\n        }));\n        const initialSelected = perguntas.reduce((acc, question) => {\n          if (question.pergunta && question.pergunta.trim() !== '') {\n            acc[question.id] = false;\n          }\n          return acc;\n        }, {});\n        const filteredQuestions = perguntas.filter(q => q.pergunta && q.pergunta.trim() !== '');\n        setQuestionsData(filteredQuestions);\n        setSelectedQuestions(initialSelected);\n      } catch (error) {\n        console.error('Erro ao processar o arquivo Excel:', error);\n      }\n    };\n    loadExcelFile();\n  }, []);\n\n  // Manipula o estado ao marcar/desmarcar uma pergunta\n  const handleCheckboxChange = id => {\n    setSelectedQuestions(prev => ({\n      ...prev,\n      [id]: !prev[id]\n    }));\n  };\n\n  // Alterna a visibilidade de um âmbito\n  const toggleScope = scope => {\n    setExpandedScopes(prev => ({\n      ...prev,\n      [scope]: !prev[scope]\n    }));\n  };\n\n  // Seleciona/deseleciona todas as perguntas\n  const handleSelectAll = () => {\n    const newSelectedQuestions = {};\n    questionsData.forEach(q => {\n      newSelectedQuestions[q.id] = !selectAll;\n    });\n    setSelectedQuestions(newSelectedQuestions);\n    setSelectAll(prev => !prev);\n  };\n\n  // Seleciona/deseleciona todas as perguntas de um âmbito\n  const handleScopeCheckboxChange = scope => {\n    const questionsInScope = questionsData.filter(q => q.âmbito === scope);\n    const areAllSelected = questionsInScope.every(q => selectedQuestions[q.id]);\n    const newSelectedQuestions = {\n      ...selectedQuestions\n    };\n    questionsInScope.forEach(q => {\n      newSelectedQuestions[q.id] = !areAllSelected;\n    });\n    setSelectedQuestions(newSelectedQuestions);\n  };\n\n  // Navega para a próxima página com as perguntas selecionadas e os dados do entrevistador/entrevistado\n  const startSurvey = () => {\n    const selectedQuestionsList = questionsData.filter(q => selectedQuestions[q.id]);\n    navigate('/survey', {\n      state: {\n        selectedQuestions: selectedQuestionsList,\n        InfoEntrevistador,\n        InfoEntrevistado\n      }\n    });\n  };\n\n  // Agrupa perguntas por âmbito\n  const groupedQuestions = questionsData.reduce((groups, question) => {\n    if (!question.âmbito) return groups;\n    if (!groups[question.âmbito]) {\n      groups[question.âmbito] = [];\n    }\n    groups[question.âmbito].push(question);\n    return groups;\n  }, {});\n\n  // Filtra os âmbitos com mais de uma pergunta\n  const filteredGroupedQuestions = Object.entries(groupedQuestions).filter(([scope, questions]) => questions.length > 1).reduce((acc, [scope, questions]) => {\n    acc[scope] = questions;\n    return acc;\n  }, {});\n\n  // Conta o número de perguntas selecionadas por âmbito\n  const selectedCountByScope = Object.keys(filteredGroupedQuestions).reduce((acc, scope) => {\n    acc[scope] = filteredGroupedQuestions[scope].filter(q => selectedQuestions[q.id]).length;\n    return acc;\n  }, {});\n  const isAnyQuestionSelected = Object.values(selectedQuestions).some(isSelected => isSelected);\n\n  // Contagem geral: selecionadas / total\n  const totalQuestions = questionsData.length;\n  const totalSelected = Object.values(selectedQuestions).filter(isSelected => isSelected).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"select-questions-container\",\n      children: \"Selecione as Perguntas a que vai Responder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"selected-count\",\n      children: [\"Quest\\xF5es Selecionadas: \", totalSelected, \"/\", totalQuestions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSelectAll,\n        children: selectAll ? 'Desmarcar todas' : 'Selecionar todas'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), Object.keys(filteredGroupedQuestions).length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"N\\xE3o h\\xE1 perguntas dispon\\xEDveis.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }, this) : Object.keys(filteredGroupedQuestions).map(scope => {\n      const questionsInScope = filteredGroupedQuestions[scope];\n      const totalQuestionsInScope = questionsInScope.length;\n      const selectedQuestionsInScope = selectedCountByScope[scope];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scope-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"scope-title\",\n          onClick: () => toggleScope(scope),\n          style: {\n            cursor: 'pointer'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"scope-checkbox\",\n            checked: questionsInScope.every(q => selectedQuestions[q.id]),\n            onChange: () => handleScopeCheckboxChange(scope)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 33\n          }, this), scope, \" (\", selectedQuestionsInScope, \"/\", totalQuestionsInScope, \")\", expandedScopes[scope] ? ' ▲' : ' ▼']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }, this), expandedScopes[scope] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questions-list\",\n          children: questionsInScope.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"custom-checkbox\",\n              checked: !!selectedQuestions[question.id],\n              onChange: () => handleCheckboxChange(question.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"question-label\",\n              children: question.pergunta\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 45\n            }, this)]\n          }, question.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 33\n        }, this)]\n      }, scope, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-survey-button\",\n      onClick: startSurvey,\n      disabled: !isAnyQuestionSelected,\n      children: \"Iniciar Question\\xE1rio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectQuestions, \"97QI2X+hUjPczdWlhZmZ4OxGHKg=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = SelectQuestions;\nexport default SelectQuestions;\nvar _c;\n$RefreshReg$(_c, \"SelectQuestions\");","map":{"version":3,"names":["React","useEffect","useState","XLSX","useNavigate","useLocation","jsxDEV","_jsxDEV","SelectQuestions","_s","location","navigate","InfoEntrevistador","InfoEntrevistado","state","questionsData","setQuestionsData","selectedQuestions","setSelectedQuestions","expandedScopes","setExpandedScopes","selectAll","setSelectAll","Object","values","some","value","trim","alert","loadExcelFile","fileNameResponse","fetch","ok","Error","fileName","json","fileResponse","data","arrayBuffer","workbook","read","type","firstSheetName","SheetNames","worksheet","Sheets","utils","sheet_to_json","header","perguntas","slice","map","row","pergunta","indexOf","âmbito","id","normasAplicaveis","initialSelected","reduce","acc","question","filteredQuestions","filter","q","error","console","handleCheckboxChange","prev","toggleScope","scope","handleSelectAll","newSelectedQuestions","forEach","handleScopeCheckboxChange","questionsInScope","areAllSelected","every","startSurvey","selectedQuestionsList","groupedQuestions","groups","push","filteredGroupedQuestions","entries","questions","length","selectedCountByScope","keys","isAnyQuestionSelected","isSelected","totalQuestions","totalSelected","children","className","_jsxFileName","lineNumber","columnNumber","style","marginBottom","onClick","totalQuestionsInScope","selectedQuestionsInScope","cursor","checked","onChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/fteixeira/Documents/Projeto-Questionario/my-app/src/SelectQuestions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './SelectQuestions.css';\r\nimport * as XLSX from 'xlsx';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nconst SelectQuestions = () => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const { InfoEntrevistador, InfoEntrevistado } = location.state || {};\r\n    \r\n    const [questionsData, setQuestionsData] = useState([]);\r\n    const [selectedQuestions, setSelectedQuestions] = useState({});\r\n    const [expandedScopes, setExpandedScopes] = useState({});\r\n    const [selectAll, setSelectAll] = useState(false); // Estado para selecionar/deselecionar todas as perguntas\r\n\r\n    useEffect(() => {\r\n        if (\r\n            !InfoEntrevistador || \r\n            !InfoEntrevistado || \r\n            Object.values(InfoEntrevistador).some(value => !value || value.trim() === '') || \r\n            Object.values(InfoEntrevistado).some(value => !value || value.trim() === '')\r\n        ) {\r\n            alert(\"Por favor, preencha todas as informações antes de prosseguir.\");\r\n            navigate('/');\r\n        }\r\n    }, [InfoEntrevistador, InfoEntrevistado, navigate]);\r\n\r\n\r\n    useEffect(() => {\r\n    const loadExcelFile = async () => {\r\n        try {\r\n            // Primeiro fetch: Obter o nome do arquivo\r\n            const fileNameResponse = await fetch('/api/first-excel-file');\r\n            if (!fileNameResponse.ok) {\r\n                throw new Error('Erro ao buscar o nome do arquivo.');\r\n            }\r\n            const { fileName } = await fileNameResponse.json();\r\n\r\n            // Segundo fetch: Carregar o arquivo Excel\r\n            const fileResponse = await fetch(`/ficheiro-excel/${fileName}`);\r\n            if (!fileResponse.ok) {\r\n                throw new Error('Erro ao carregar o arquivo Excel.');\r\n            }\r\n            const data = await fileResponse.arrayBuffer();\r\n\r\n            // Processar o arquivo Excel\r\n            const workbook = XLSX.read(data, { type: 'array' });\r\n            const firstSheetName = workbook.SheetNames[0];\r\n            const worksheet = workbook.Sheets[firstSheetName];\r\n            const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\r\n            const header = json[0];\r\n            const perguntas = json.slice(1).map(row => ({\r\n                pergunta: row[header.indexOf('Pergunta')],\r\n                âmbito: row[header.indexOf('âmbito')],\r\n                id: row[header.indexOf('Indice Pergunta')],\r\n                normasAplicaveis: row[header.indexOf('Normas_aplicavel')],\r\n            }));\r\n\r\n            const initialSelected = perguntas.reduce((acc, question) => {\r\n                if (question.pergunta && question.pergunta.trim() !== '') {\r\n                    acc[question.id] = false;\r\n                }\r\n                return acc;\r\n            }, {});\r\n\r\n            const filteredQuestions = perguntas.filter(q => q.pergunta && q.pergunta.trim() !== '');\r\n\r\n            setQuestionsData(filteredQuestions);\r\n            setSelectedQuestions(initialSelected);\r\n        } catch (error) {\r\n            console.error('Erro ao processar o arquivo Excel:', error);\r\n        }\r\n    };\r\n\r\n    loadExcelFile();\r\n}, []);\r\n\r\n    // Manipula o estado ao marcar/desmarcar uma pergunta\r\n    const handleCheckboxChange = (id) => {\r\n        setSelectedQuestions(prev => ({\r\n            ...prev,\r\n            [id]: !prev[id],\r\n        }));\r\n    };\r\n\r\n    // Alterna a visibilidade de um âmbito\r\n    const toggleScope = (scope) => {\r\n        setExpandedScopes(prev => ({\r\n            ...prev,\r\n            [scope]: !prev[scope],\r\n        }));\r\n    };\r\n\r\n    // Seleciona/deseleciona todas as perguntas\r\n    const handleSelectAll = () => {\r\n        const newSelectedQuestions = {};\r\n        questionsData.forEach(q => {\r\n            newSelectedQuestions[q.id] = !selectAll;\r\n        });\r\n        setSelectedQuestions(newSelectedQuestions);\r\n        setSelectAll(prev => !prev);\r\n    };\r\n\r\n    // Seleciona/deseleciona todas as perguntas de um âmbito\r\n    const handleScopeCheckboxChange = (scope) => {\r\n        const questionsInScope = questionsData.filter(q => q.âmbito === scope);\r\n        const areAllSelected = questionsInScope.every(q => selectedQuestions[q.id]);\r\n\r\n        const newSelectedQuestions = { ...selectedQuestions };\r\n        questionsInScope.forEach(q => {\r\n            newSelectedQuestions[q.id] = !areAllSelected;\r\n        });\r\n\r\n        setSelectedQuestions(newSelectedQuestions);\r\n    };\r\n\r\n    // Navega para a próxima página com as perguntas selecionadas e os dados do entrevistador/entrevistado\r\n    const startSurvey = () => {\r\n        const selectedQuestionsList = questionsData.filter(q => selectedQuestions[q.id]);\r\n        navigate('/survey', {\r\n            state: {\r\n                selectedQuestions: selectedQuestionsList,\r\n                InfoEntrevistador,\r\n                InfoEntrevistado,\r\n            },\r\n        });\r\n    };\r\n\r\n    // Agrupa perguntas por âmbito\r\n    const groupedQuestions = questionsData.reduce((groups, question) => {\r\n        if (!question.âmbito) return groups;\r\n        if (!groups[question.âmbito]) {\r\n            groups[question.âmbito] = [];\r\n        }\r\n        groups[question.âmbito].push(question);\r\n        return groups;\r\n    }, {});\r\n\r\n    // Filtra os âmbitos com mais de uma pergunta\r\n    const filteredGroupedQuestions = Object.entries(groupedQuestions)\r\n        .filter(([scope, questions]) => questions.length > 1)\r\n        .reduce((acc, [scope, questions]) => {\r\n            acc[scope] = questions;\r\n            return acc;\r\n        }, {});\r\n\r\n    // Conta o número de perguntas selecionadas por âmbito\r\n    const selectedCountByScope = Object.keys(filteredGroupedQuestions).reduce((acc, scope) => {\r\n        acc[scope] = filteredGroupedQuestions[scope].filter(q => selectedQuestions[q.id]).length;\r\n        return acc;\r\n    }, {});\r\n\r\n    const isAnyQuestionSelected = Object.values(selectedQuestions).some(isSelected => isSelected);\r\n\r\n    // Contagem geral: selecionadas / total\r\n    const totalQuestions = questionsData.length;\r\n    const totalSelected = Object.values(selectedQuestions).filter(isSelected => isSelected).length;\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"select-questions-container\">Selecione as Perguntas a que vai Responder</h1>\r\n            <p className=\"selected-count\">Questões Selecionadas: {totalSelected}/{totalQuestions}</p>\r\n            \r\n            {/* Botão para selecionar/deselecionar todas as perguntas */}\r\n            <div style={{ marginBottom: '10px' }}>\r\n                <button onClick={handleSelectAll}>\r\n                    {selectAll ? 'Desmarcar todas' : 'Selecionar todas'}\r\n                </button>\r\n            </div>\r\n\r\n            {Object.keys(filteredGroupedQuestions).length === 0 ? (\r\n                <p>Não há perguntas disponíveis.</p>\r\n            ) : (\r\n                Object.keys(filteredGroupedQuestions).map(scope => {\r\n                    const questionsInScope = filteredGroupedQuestions[scope];\r\n                    const totalQuestionsInScope = questionsInScope.length;\r\n                    const selectedQuestionsInScope = selectedCountByScope[scope];\r\n\r\n                    return (\r\n                        <div className=\"scope-container\" key={scope}>\r\n                            <h2 className=\"scope-title\" onClick={() => toggleScope(scope)} style={{ cursor: 'pointer' }}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"scope-checkbox\"\r\n                                    checked={questionsInScope.every(q => selectedQuestions[q.id])}\r\n                                    onChange={() => handleScopeCheckboxChange(scope)}\r\n                                />\r\n                                {scope} ({selectedQuestionsInScope}/{totalQuestionsInScope})\r\n                                {expandedScopes[scope] ? ' ▲' : ' ▼'}\r\n                            </h2>\r\n                            {expandedScopes[scope] && (\r\n                                <div className=\"questions-list\">\r\n                                    {questionsInScope.map((question) => (\r\n                                        <div className=\"question-item\" key={question.id}>\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                className=\"custom-checkbox\"\r\n                                                checked={!!selectedQuestions[question.id]}\r\n                                                onChange={() => handleCheckboxChange(question.id)}\r\n                                            />\r\n                                            <label className=\"question-label\">{question.pergunta}</label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                })\r\n            )}\r\n            <button\r\n                className=\"start-survey-button\"\r\n                onClick={startSurvey}\r\n                disabled={!isAnyQuestionSelected}\r\n            >\r\n                Iniciar Questionário\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectQuestions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}